/* Generated by ./config.exe configure -t unix (2020-08-09 21:50:09-00:00). */

open Lwt.Infix;
let return = Lwt.return;
let run = t => {
  OS.Main.run(t);
  exit(0);
};

let _ = Printexc.record_backtrace(true);

module Unikernel1 = Unikernel.Hello(OS.Time);

module Mirage_logs1 = Mirage_logs.Make(Pclock);

let argv_unix1 = lazy(Bootvar.argv());

let time1 = lazy(return());

let pclock1 = lazy(return());

let key1 =
  lazy({
    let __argv_unix1 = Lazy.force(argv_unix1);
    __argv_unix1
    >>= (
      _argv_unix1 =>
        return(
          Functoria_runtime.with_argv(
            List.map(fst, Key_gen.runtime_keys),
            "hello",
            _argv_unix1,
          ),
        )
    );
  });

let f11 =
  lazy({
    let __time1 = Lazy.force(time1);
    __time1 >>= (_time1 => Unikernel1.start(_time1));
  });

let mirage_logs1 =
  lazy({
    let __pclock1 = Lazy.force(pclock1);
    __pclock1
    >>= (
      _pclock1 => {
        let ring_size = None;
        let reporter = Mirage_logs1.create(~ring_size?, ());
        Mirage_runtime.set_level(~default=Logs.Info, Key_gen.logs());
        Mirage_logs1.set_reporter(reporter);
        Lwt.return(reporter);
      }
    );
  });

let mirage1 =
  lazy({
    let __key1 = Lazy.force(key1);
    let __mirage_logs1 = Lazy.force(mirage_logs1);
    let __f11 = Lazy.force(f11);
    __key1
    >>= (
      _key1 =>
        __mirage_logs1
        >>= (_mirage_logs1 => __f11 >>= (_f11 => Lwt.return_unit))
    );
  });

let () = {
  let t =
    Lazy.force(key1)
    >>= (_ => Lazy.force(mirage_logs1) >>= (_ => Lazy.force(mirage1)));
  run(t);
};
